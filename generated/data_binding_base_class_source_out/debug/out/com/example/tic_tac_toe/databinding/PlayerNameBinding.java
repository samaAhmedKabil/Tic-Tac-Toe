// Generated by view binder compiler. Do not edit!
package com.example.tic_tac_toe.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.tic_tac_toe.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class PlayerNameBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView EnterNames;

  @NonNull
  public final EditText editPlayer1;

  @NonNull
  public final EditText editPlayer2;

  @NonNull
  public final TextView player1;

  @NonNull
  public final TextView player2;

  @NonNull
  public final Button submit;

  private PlayerNameBinding(@NonNull ConstraintLayout rootView, @NonNull TextView EnterNames,
      @NonNull EditText editPlayer1, @NonNull EditText editPlayer2, @NonNull TextView player1,
      @NonNull TextView player2, @NonNull Button submit) {
    this.rootView = rootView;
    this.EnterNames = EnterNames;
    this.editPlayer1 = editPlayer1;
    this.editPlayer2 = editPlayer2;
    this.player1 = player1;
    this.player2 = player2;
    this.submit = submit;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static PlayerNameBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static PlayerNameBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.player_name, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static PlayerNameBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.EnterNames;
      TextView EnterNames = ViewBindings.findChildViewById(rootView, id);
      if (EnterNames == null) {
        break missingId;
      }

      id = R.id.editPlayer1;
      EditText editPlayer1 = ViewBindings.findChildViewById(rootView, id);
      if (editPlayer1 == null) {
        break missingId;
      }

      id = R.id.editPlayer2;
      EditText editPlayer2 = ViewBindings.findChildViewById(rootView, id);
      if (editPlayer2 == null) {
        break missingId;
      }

      id = R.id.player1;
      TextView player1 = ViewBindings.findChildViewById(rootView, id);
      if (player1 == null) {
        break missingId;
      }

      id = R.id.player2;
      TextView player2 = ViewBindings.findChildViewById(rootView, id);
      if (player2 == null) {
        break missingId;
      }

      id = R.id.submit;
      Button submit = ViewBindings.findChildViewById(rootView, id);
      if (submit == null) {
        break missingId;
      }

      return new PlayerNameBinding((ConstraintLayout) rootView, EnterNames, editPlayer1,
          editPlayer2, player1, player2, submit);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
